# facet_grid(.~eta, scales = "free", switch = "x", space = "free_x",
#            ) +
scale_fill_viridis_d(option = "viridis", begin = 0.15, end = 0.7125) +
scale_color_viridis_d(option = "viridis", begin = 0.15, end = 0.7125) +
theme_bw() +
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, face = "plain"),
axis.title.x=element_blank(),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"),
#strip.placement = "outside",
legend.position="bottom") +
ggtitle("need to redo with r=50 on RHS")
cleaned_results %>%
summarise(RMSE = sqrt(mean((ccc_hat - ccc)^2)),
n = n()) %>%
filter(r != 8, n > 90) %>%
ungroup %>%
group_by(alpha, delta) %>%
pivot_wider(values_from=RMSE, names_from=Method) %>%
mutate(diff0 = 100*(`Method 3` - `Method 0`)/`Method 0`) %>%
summarise(mean(diff0))
cleaned_results %>%
summarise(RMSE = sqrt(mean((ccc_hat - ccc)^2)),
n = n()) %>%
filter(r != 8, n > 90) %>%
ungroup %>%
group_by(alpha, delta) %>%
pivot_wider(values_from=RMSE, names_from=Method) %>%
mutate(diff0 = 100*(`Method 3` - `Method 0`)/`Method 0`) %>%
summarise(round(mean(diff0)))
cleaned_results
cleaned_results %>%
summarise(RMSE = sqrt(mean((ccc_hat - ccc)^2)),
n = n(),
median(selected_lambda)) %>%
filter(r != 8, n > 90) %>%
ungroup %>%
group_by(alpha, delta) %>%
pivot_wider(values_from=RMSE, names_from=Method) %>%
mutate(diff0 = 100*(`Method 3` - `Method 0`)/`Method 0`) %>%
summarise(round(mean(diff0)))
cleaned_results %>%
summarise(RMSE = sqrt(mean((ccc_hat - ccc)^2)),
n = n(),
median(selected_lambda))
cleaned_results %>%
filter(Method == "Method 3") %>%
summarise(median(selected_lambda))
cleaned_results %>%
filter(Method == "Method 3") %>%
summarise(median(selected_lambda)) %>%
filter(r != 8, n > 90) %>%
ungroup %>%
group_by(alpha, delta)
cleaned_results %>%
filter(Method == "Method 3") %>%
summarise(median(selected_lambda))
cleaned_results %>%
filter(Method == "Method 3") %>%
summarise(median(selected_lambda)n = n()) %>%
filter(r != 8, n > 90) %>%
ungroup %>%
group_by(alpha, delta)
cleaned_results %>%
filter(Method == "Method 3") %>%
summarise(median(selected_lambda), n = n()) %>%
filter(r != 8, n > 90) %>%
ungroup %>%
group_by(alpha, delta)
cleaned_results %>%
filter(Method == "Method 3") %>%
summarise(lambda = median(selected_lambda), n = n()) %>%
filter(r != 8, n > 90) %>%
ungroup %>%
group_by(alpha, delta)
cleaned_results
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta) %>%
summarise(lambda = median(selected_lambda), n = n())
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r) %>%
summarise(lambda = median(selected_lambda), n = n())
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r) %>%
filter(delta == 0.0001) %>%
summarise(lambda = median(selected_lambda), n = n())
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r) %>%
filter(delta == 0.001) %>%
summarise(lambda = median(selected_lambda), n = n())
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r) %>%
filter(delta == 0.001)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r) %>%
filter(delta == 0.001) %>%
summarise(lambda = median(selected_lambda), n = n())
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r, ccc) %>%
filter(delta == 0.001) %>%
summarise(lambda = median(selected_lambda), n = n())
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r, ccc) %>%
filter(delta == 0.001) %>%
summarise(lambda = median(selected_lambda), n = n()) %>%
print(Inf)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r, ccc) %>%
filter(delta == 0.001) %>%
summarise(lambda = median(selected_lambda), n = n()) %>%
print(n = Inf)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r, ccc) %>%
filter(alpha == 0.1, delta == 0.001) %>%
summarise(lambda = median(selected_lambda), n = n()) %>%
print(n = Inf)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r, ccc) %>%
filter(alpha == 0.1, delta == 0.001, r != 8) %>%
summarise(lambda = median(selected_lambda), n = n()) %>%
print(n = Inf)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta, r, ccc) %>%
filter(delta == 0.001, r != 8) %>%
summarise(lambda = median(selected_lambda), n = n()) %>%
print(n = Inf)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
group_by(alpha, delta) %>%
filter(delta == 0.001, r != 8) %>%
summarise(lambda = median(selected_lambda), n = n()) %>%
print(n = Inf)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
filter(delta == 0.001, r != 8) %>%
group_by(alpha, delta, r, ccc) %>%
summarise(lambda = median(selected_lambda), n = n()) %>%
print(n = Inf)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
filter(delta == 0.001, r != 8) %>%
group_by(alpha, delta) %>%
summarise(lambda = median(selected_lambda), n = n()) %>%
print(n = Inf)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
filter(delta == 0.001, r != 8) %>%
group_by(alpha, delta) %>%
summarise(lambda = median(selected_lambda),
zl = mean(selected_lambda == 0),
n = n()) %>%
print(n = Inf)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
filter(delta == 0.001, r != 8) %>%
group_by(alpha, delta) %>%
summarise(lambda = median(selected_lambda),
zl = 100*mean(selected_lambda == 0),
n = n()) %>%
print(n = Inf)
cleaned_results %>%
filter(Method == "Method 3") %>%
ungroup %>%
filter(delta == 0.001, r != 8) %>%
group_by(alpha, delta) %>%
summarise(lambda = median(selected_lambda),
zl = round(100*mean(selected_lambda == 0)),
n = n()) %>%
print(n = Inf)
main_summary <- cleaned_results %>%
summarise(RMSE = sqrt(mean((ccc_hat - ccc)^2)),
n = n()) %>%
filter(n > 90) %>%
select(-n) %>%
filter(Method %in% c("Method 0", "Method 3")) %>%
pivot_wider(names_from=r, values_from=RMSE) %>%
arrange(desc(delta), desc(alpha), ccc, Method) %>%
select(Method, ccc, alpha, delta, `6`, `10`, `14`:`50`)
main_summary %>% print(n=Inf)
cleaned_results %>%
summarise(RMSE = sqrt(mean((ccc_hat - ccc)^2)),
n = n()) %>%
filter(r != 8, n > 90) %>%
ungroup %>%
group_by(alpha, delta) %>%
pivot_wider(values_from=RMSE, names_from=Method) %>%
mutate(diff0 = 100*(`Method 3` - `Method 0`)/`Method 0`,
diff3 = 100*(`Method 0` - `Method 3`)/`Method 3`) %>%
summarise(round(mean(diff0)),
round(mean(diff3)))
cleaned_results %>%
ungroup %>%
filter(Method %in% c("Method 0", "Method 3")) %>%
filter(alpha == 0.1) %>%
filter(delta %in% c(1e-3, 1e-5)) %>%
mutate(r = factor(r, levels=as.character(c(6,10,14,30,50)))) %>%
filter(!is.na(r)) %>%
ggplot(aes(x = r, y = ccc_hat, col = Method, fill = Method)) +
facet_wrap(~delta*ccc, scales="fixed",
labeller = labeller(delta = (function(x) paste0("delta = ",x)),
ccc = (function(x) paste0("C = ",x)))) +
geom_boxplot(outlier.colour = NULL, alpha = 0.6) +
geom_hline(aes(yintercept = ccc)) +
theme_bw() +
labs(y = latex2exp::TeX("$\\hat{C}$")) +
# facet_grid(.~eta, scales = "free", switch = "x", space = "free_x",
#            ) +
scale_fill_viridis_d(option = "viridis", begin = 0.15, end = 0.7125) +
scale_color_viridis_d(option = "viridis", begin = 0.15, end = 0.7125) +
theme_bw() +
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, face = "plain"),
axis.title.x=element_blank(),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"),
#strip.placement = "outside",
legend.position="bottom") +
ggtitle("need to redo with r=50 on RHS")
?scales
cleaned_results %>%
ungroup %>%
filter(Method %in% c("Method 0", "Method 3")) %>%
filter(alpha == 0.1) %>%
filter(delta %in% c(1e-3, 1e-5)) %>%
mutate(r = factor(r, levels=as.character(c(6,10,14,30,50)))) %>%
filter(!is.na(r)) %>%
ggplot(aes(x = r, y = ccc_hat, col = Method, fill = Method)) +
facet_wrap(~delta*ccc, scales="free_y",
labeller = labeller(delta = (function(x) paste0("delta = ",x)),
ccc = (function(x) paste0("C = ",x)))) +
geom_boxplot(outlier.colour = NULL, alpha = 0.6) +
geom_hline(aes(yintercept = ccc)) +
theme_bw() +
labs(y = latex2exp::TeX("$\\hat{C}$")) +
# facet_grid(.~eta, scales = "free", switch = "x", space = "free_x",
#            ) +
scale_fill_viridis_d(option = "viridis", begin = 0.15, end = 0.7125) +
scale_color_viridis_d(option = "viridis", begin = 0.15, end = 0.7125) +
theme_bw() +
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, face = "plain"),
axis.title.x=element_blank(),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"),
#strip.placement = "outside",
legend.position="bottom") +
ggtitle("need to redo with r=50 on RHS")
?facet_wrap
cleaned_results %>%
ungroup %>%
filter(Method %in% c("Method 0", "Method 3")) %>%
filter(alpha == 0.1) %>%
filter(delta %in% c(1e-3, 1e-5)) %>%
mutate(r = factor(r, levels=as.character(c(6,10,14,30,50)))) %>%
filter(!is.na(r)) %>%
ggplot(aes(x = r, y = ccc_hat, col = Method, fill = Method)) +
facet_wrap(~delta*ccc, scales="free_y",
labeller = labeller(delta = (function(x) paste0("delta = ",x)),
ccc = (function(x) paste0("C = ",x)))) +
geom_boxplot(outlier.colour = NULL, alpha = 0.6) +
geom_hline(aes(yintercept = ccc)) +
theme_bw() +
labs(y = latex2exp::TeX("$\\hat{C}$")) +
# facet_grid(.~eta, scales = "free", switch = "x", space = "free_x",
#            ) +
scale_fill_viridis_d(option = "viridis", begin = 0.15, end = 0.7125) +
scale_color_viridis_d(option = "viridis", begin = 0.15, end = 0.7125) +
theme_bw() +
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 12, angle = 0, face = "plain"),
axis.title.x=element_blank(),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain"),
#strip.placement = "outside",
legend.position="bottom") +
ggtitle("need to redo with r=50 on RHS")
ggsave("/Users/adwillis/software/rre_sims/rre_manuscript/jas-submitted-v2/images/method_sim_2.pdf")
simulate <- function(ccc, alpha, delta, replicates, nsim) {
# this function must return a list of length nsim
x <- replicate(nsim,
rnbinom(n = ccc*replicates,
size = alpha,
prob = (delta/(1+delta))) %>%
matrix(. ,nrow = ccc, ncol = replicates) %>%
split(.,col(.)) %>%
lapply(make_frequency_count_table),
simplify = F)
return(x);
}
simulate(1000, 0.1, 0.1, replicates=1, nsim = 100)
simulate <- function(ccc, alpha, delta, replicates, nsim) {
# this function must return a list of length nsim
x <- replicate(nsim,
rnbinom(n = ccc*replicates,
size = alpha,
prob = (delta/(1+delta))) %>%
matrix(. ,nrow = ccc, ncol = replicates) %>%
split(.,col(.)) %>%
lapply(breakaway::make_frequency_count_table),
simplify = F)
return(x);
}
simulate(1000, 0.1, 0.1, replicates=1, nsim = 100)
simulate(1000, 0.1, 0.1, replicates=100, nsim = 1)
sims <- simulate(1000, 0.1, 0.1, replicates=100, nsim = 1)
sims %>%
lapply(breakaway::sample_richness) %>%
summary
sims %>%
lapply(breakaway::sample_richness)
sims %>%
breakaway::sample_richness %>%
summary
sims %>%
breakaway::sample_richness
sims
sims[[1]]
sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
summary
sims[[1]] %>%
lapply(breakaway::sample_richness)
library(breakaway)
sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates
sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summar
sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary
sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate
(sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000
(sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000 %>% mean
((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
sims2 <- simulate(1000, 0.01, 0.001, replicates=100, nsim = 1)
1 - ((sims2[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
sims <- simulate(1000, 0.1, 0.1, replicates=100, nsim = 1)
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
sims <- simulate(1000, 0.1, 0.1, replicates=100, nsim = 1)
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
sims <- simulate(1000, 0.1, 0.1, replicates=100, nsim = 1)
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
sims <- simulate(1000, 0.1, 0.1, replicates=100, nsim = 1)
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
sims <- simulate(1000, 0.1, 0.1, replicates=1000, nsim = 1)
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
1 - ((sims[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
sims[[1]] %>%
lapply(breakaway::sample_richness)
sims[[1]]
sims[[1]] %>%
lapply(function(x) {x$Freq[x$Var1 == 1]})
sims[[1]] %>%
lapply(function(x) {x$Freq[x$Var1 == 1]}) %>% unlist
dnbinom(x=1,
size = alpha,
prob = (delta/(1+delta)))
dnbinom(x=1,
size = 0.01,
prob = (0.001/(1+0.001)))
dnbinom(x=1,
size = 0.1,
prob = (0.1/(1+0.1)))
sims2 <- simulate(1000, 0.01, 0.001, replicates=100, nsim = 1)
1 - ((sims2[[1]] %>%
lapply(breakaway::sample_richness) %>%
alpha_estimates %>%
summary %$% estimate) / 1000) %>% mean
dnbinom(x=1,
size = 0.01,
prob = (0.001/(1+0.001)))
dnbinom(x=1:3,
size = 0.01,
prob = (0.001/(1+0.001)))
dnbinom(x=1:3,
size = 0.01,
prob = (0.001/(1+0.001))) %>% sum
dnbinom(x=1:3,
size = 0.01,
prob = (0.001/(1+0.001))) %>% sum %>% round(3)
dnbinom(x=0:9,
size = 0.01,
prob = (0.001/(1+0.001))) %>% sum %>% round(3)
1-dnbinom(x=0:9,
size = 0.01,
prob = (0.001/(1+0.001))) %>% sum %>% round(3)
1-(dnbinom(x=0:9,
size = 0.01,
prob = (0.001/(1+0.001))) %>% sum %>% round(3))
sims2[[1]] %>%
lapply(function(x) {x$Freq[x$Var1 == 1]}) %>% unlist
sims2[[1]] %>%
lapply(function(x) {max(x$Var1)}) %>% unlist
sims2[[1]] %>%
lapply(function(x) {max(x$Var1)}) %>% unlist %>% mean
more_deltas
list.files("sdl-rre/output/", full.names=TRUE) %>%
str_subset("zinb_r") %>%
sapply(read_csv, simplify=F) %>%
do.call(bind_rows, .) %>%
mutate(Method = recode(Method, mle_no_pen = "Method 0",
gof = "Method 3")) %>%
group_by(Method, ccc, alpha, delta, zero_probability, replicates)  %>%
summarise(RMSE = sqrt(mean((ccc_hat - ccc)^2)),
n = n())
